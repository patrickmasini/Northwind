DROP SCHEMA if exists Northwind_DW;
CREATE SCHEMA Northwind_DW;
DROP TABLE if exists Northwind_DW.Day_Dim;
CREATE TABLE Northwind_DW.Day_Dim(
  date_dim_id              INT NOT NULL,
  date_actual              DATE NOT NULL,
  epoch                    BIGINT NOT NULL,
  day_suffix               VARCHAR(4) NOT NULL,
  day_name                 VARCHAR(9) NOT NULL,
  day_of_week              INT NOT NULL,
  day_of_month             INT NOT NULL,
  day_of_quarter           INT NOT NULL,
  day_of_year              INT NOT NULL,
  week_of_month            INT NOT NULL,
  week_of_year             INT NOT NULL,
  week_of_year_iso         CHAR(10) NOT NULL,
  month_actual             INT NOT NULL,
  month_name               VARCHAR(9) NOT NULL,
  month_name_abbreviated   CHAR(3) NOT NULL,
  quarter_actual           INT NOT NULL,
  quarter_name             VARCHAR(9) NOT NULL,
  year_actual              INT NOT NULL,
  first_day_of_week        DATE NOT NULL,
  last_day_of_week         DATE NOT NULL,
  first_day_of_month       DATE NOT NULL,
  last_day_of_month        DATE NOT NULL,
  first_day_of_quarter     DATE NOT NULL,
  last_day_of_quarter      DATE NOT NULL,
  first_day_of_year        DATE NOT NULL,
  last_day_of_year         DATE NOT NULL,
  mmyyyy                   CHAR(6) NOT NULL,
  mmddyyyy                 CHAR(10) NOT NULL,
  weekend_indr             BOOLEAN NOT NULL
);

ALTER TABLE Northwind_DW.Day_Dim ADD CONSTRAINT d_date_date_dim_id_pk PRIMARY KEY (date_dim_id);

CREATE INDEX d_date_date_actual_idx
  ON Northwind_DW.Day_Dim(date_actual);

COMMIT;

INSERT INTO Northwind_DW.Day_Dim
SELECT TO_CHAR(datum, 'yyyymmdd')::INT AS date_dim_id,
       datum AS date_actual,
       EXTRACT(EPOCH FROM datum) AS epoch,
       TO_CHAR(datum, 'fmDDth') AS day_suffix,
       TO_CHAR(datum, 'Day') AS day_name,
       EXTRACT(ISODOW FROM datum) AS day_of_week,
       EXTRACT(DAY FROM datum) AS day_of_month,
       datum - DATE_TRUNC('quarter', datum)::DATE + 1 AS day_of_quarter,
       EXTRACT(DOY FROM datum) AS day_of_year,
       TO_CHAR(datum, 'W')::INT AS week_of_month,
       EXTRACT(WEEK FROM datum) AS week_of_year,
       EXTRACT(ISOYEAR FROM datum) || TO_CHAR(datum, '"-W"IW-') || EXTRACT(ISODOW FROM datum) AS week_of_year_iso,
       EXTRACT(MONTH FROM datum) AS month_actual,
       TO_CHAR(datum, 'Month') AS month_name,
       TO_CHAR(datum, 'Mon') AS month_name_abbreviated,
       EXTRACT(QUARTER FROM datum) AS quarter_actual,
       CASE
           WHEN EXTRACT(QUARTER FROM datum) = 1 THEN 'First'
           WHEN EXTRACT(QUARTER FROM datum) = 2 THEN 'Second'
           WHEN EXTRACT(QUARTER FROM datum) = 3 THEN 'Third'
           WHEN EXTRACT(QUARTER FROM datum) = 4 THEN 'Fourth'
           END AS quarter_name,
       EXTRACT(ISOYEAR FROM datum) AS year_actual,
       datum + (1 - EXTRACT(ISODOW FROM datum))::INT AS first_day_of_week,
       datum + (7 - EXTRACT(ISODOW FROM datum))::INT AS last_day_of_week,
       datum + (1 - EXTRACT(DAY FROM datum))::INT AS first_day_of_month,
       (DATE_TRUNC('MONTH', datum) + INTERVAL '1 MONTH - 1 day')::DATE AS last_day_of_month,
       DATE_TRUNC('quarter', datum)::DATE AS first_day_of_quarter,
       (DATE_TRUNC('quarter', datum) + INTERVAL '3 MONTH - 1 day')::DATE AS last_day_of_quarter,
       TO_DATE(EXTRACT(YEAR FROM datum) || '-01-01', 'YYYY-MM-DD') AS first_day_of_year,
       TO_DATE(EXTRACT(YEAR FROM datum) || '-12-31', 'YYYY-MM-DD') AS last_day_of_year,
       TO_CHAR(datum, 'mmyyyy') AS mmyyyy,
       TO_CHAR(datum, 'mmddyyyy') AS mmddyyyy,
       CASE
           WHEN EXTRACT(ISODOW FROM datum) IN (6, 7) THEN TRUE
           ELSE FALSE
           END AS weekend_indr
FROM (SELECT '1970-01-01'::DATE + SEQUENCE.DAY AS datum
      FROM GENERATE_SERIES(0, 29219) AS SEQUENCE (DAY)
      GROUP BY SEQUENCE.DAY) DQ
ORDER BY 1;
COMMIT;

DROP TABLE if exists Northwind_DW.Product_Dim;
CREATE TABLE Northwind_DW.Product_Dim (
	product_id smallint NOT NULL,
	product_name character varying(40) COLLATE pg_catalog."default" NOT NULL,
	category_id smallint NOT NULL,
	quantity_per_unit character varying(20) COLLATE pg_catalog."default" NOT NULL,
	PRIMARY KEY (product_id)
);
INSERT INTO Northwind_DW.Product_Dim( product_id, product_name, category_id, quantity_per_unit)
SELECT product_id, product_name, category_id, quantity_per_unit
FROM public.Products;

DROP TABLE if exists Northwind_DW.Employee_Dim;
CREATE TABLE Northwind_DW.Employee_Dim (
	employee_id smallint NOT NULL,
	last_name character varying(20) COLLATE pg_catalog."default" NOT NULL,
	first_name character varying(10) COLLATE pg_catalog."default" NOT NULL,
	region character varying(15) COLLATE pg_catalog."default",
	city character varying(15) COLLATE pg_catalog."default" NOT NULL,
	country character varying(15) COLLATE pg_catalog."default" NOT NULL,
	PRIMARY KEY (employee_id)
);
INSERT INTO Northwind_DW.Employee_Dim( employee_id, last_name, first_name, region, city, country)
SELECT employee_id, last_name, first_name, region, city, country
FROM public.Employees;

DROP TABLE if exists Northwind_DW.Customer_Dim;
CREATE TABLE Northwind_DW.Customer_Dim (
	customer_id bpchar COLLATE pg_catalog."default" NOT NULL,
	company_name character varying(40) COLLATE pg_catalog."default" NOT NULL,
	contact_name character varying(30) COLLATE pg_catalog."default" NOT NULL,
	region character varying(15) COLLATE pg_catalog."default",
	city character varying(15) COLLATE pg_catalog."default" NOT NULL,
	country character varying(15) COLLATE pg_catalog."default" NOT NULL,
	PRIMARY KEY (customer_id)
);
INSERT INTO Northwind_DW.Customer_Dim( customer_id, contact_name, company_name, region, city, country)
SELECT customer_id, contact_name, company_name, region, city, country
FROM public.Customers;

DROP TABLE if exists Northwind_DW.Order_Fact;
CREATE TABLE Northwind_DW.Order_Fact (
	order_id smallint NOT NULL,
	customer_id bpchar COLLATE pg_catalog."default",
	order_date date,
	employee_id smallint NOT NULL,
	product_id smallint NOT NULL,
	required_date date,
	shipped_date date,
	date_dim_id integer NOT NULL,
	ship_via smallint NOT NULL,
	freight real NOT NULL,
	unit_price real NOT NULL,
	quantity smallint NOT NULL,
	discount real NOT NULL,
	units_in_stock smallint NOT NULL,
	units_on_order smallint NOT NULL,
	reorder_level smallint NOT NULL
	
);
INSERT INTO Northwind_DW.Order_fact( order_id, order_date, product_id, customer_id, employee_id, required_date, shipped_date, ship_via, date_dim_id, quantity, discount, unit_price, freight, units_in_stock, units_on_order, reorder_level)
SELECT o.order_id, o.order_date, p.product_id, o.customer_id, o.employee_id, o.required_date, o.shipped_date, o.ship_via, d.date_dim_id, od.quantity, od.discount, od.unit_price, o.freight, p.units_in_stock, p.units_on_order, p.reorder_level
FROM public.orders o JOIN public.order_details od ON od.order_id = o.order_id JOIN public.products p ON od.product_id = p.product_id JOIN Northwind_DW.Day_Dim d ON d.date_actual = o.order_date;